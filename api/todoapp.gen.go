// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewTodoItem defines model for NewTodoItem.
type NewTodoItem struct {

	// Todo content, description
	Content *string `json:"content,omitempty"`

	// Flag of done. 0 means not done, 1 means done.
	Done *int `json:"done,omitempty"`

	// Attribute for sort key of local secondary index.
	LIdxDone *string `json:"l_idx_done,omitempty"`

	// Todo title
	Title string `json:"title"`
}

// TodoItem defines model for TodoItem.
type TodoItem struct {
	// Embedded struct due to allOf(#/components/schemas/NewTodoItem)
	NewTodoItem `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Todo ID
	TodoID string `json:"todoID"`

	// User ID
	UserID string `json:"userID"`
}

// FindTodosParams defines parameters for FindTodos.
type FindTodosParams struct {

	// Whether the todo has been done. `0` means not done, `1` means done.
	Done *int32 `json:"done,omitempty"`

	// Target property for searching. `title`, `content`, or `both`. This parameter works with `keyword` parameter.
	Target *string `json:"target,omitempty"`

	// Part or all of the title, content or both of them that match some todos.
	Keyword *string `json:"keyword,omitempty"`
}

// AddTodoJSONBody defines parameters for AddTodo.
type AddTodoJSONBody NewTodoItem

// AddTodoJSONRequestBody defines body for AddTodo for application/json ContentType.
type AddTodoJSONRequestBody AddTodoJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get some todos
	// (GET /todos)
	FindTodos(w http.ResponseWriter, r *http.Request, params FindTodosParams)
	// add a todo
	// (POST /todos)
	AddTodo(w http.ResponseWriter, r *http.Request)
	// delete a todo
	// (DELETE /todos/{todoID})
	DeleteTodoByID(w http.ResponseWriter, r *http.Request, todoID string)
	// get a todo
	// (GET /todos/{todoID})
	FindTodoByID(w http.ResponseWriter, r *http.Request, todoID string)
	// update a todo
	// (PATCH /todos/{todoID})
	UpdateTodoByID(w http.ResponseWriter, r *http.Request, todoID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindTodos operation middleware
func (siw *ServerInterfaceWrapper) FindTodos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTodosParams

	// ------------- Optional query parameter "done" -------------
	if paramValue := r.URL.Query().Get("done"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "done", r.URL.Query(), &params.Done)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter done: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "target" -------------
	if paramValue := r.URL.Query().Get("target"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "target", r.URL.Query(), &params.Target)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter target: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "keyword" -------------
	if paramValue := r.URL.Query().Get("keyword"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "keyword", r.URL.Query(), &params.Keyword)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter keyword: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindTodos(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddTodo operation middleware
func (siw *ServerInterfaceWrapper) AddTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTodo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTodoByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "todoID" -------------
	var todoID string

	err = runtime.BindStyledParameter("simple", false, "todoID", chi.URLParam(r, "todoID"), &todoID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter todoID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodoByID(w, r, todoID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindTodoByID operation middleware
func (siw *ServerInterfaceWrapper) FindTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "todoID" -------------
	var todoID string

	err = runtime.BindStyledParameter("simple", false, "todoID", chi.URLParam(r, "todoID"), &todoID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter todoID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindTodoByID(w, r, todoID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateTodoByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "todoID" -------------
	var todoID string

	err = runtime.BindStyledParameter("simple", false, "todoID", chi.URLParam(r, "todoID"), &todoID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter todoID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodoByID(w, r, todoID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos", wrapper.FindTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todos", wrapper.AddTodo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todos/{todoID}", wrapper.DeleteTodoByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos/{todoID}", wrapper.FindTodoByID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/todos/{todoID}", wrapper.UpdateTodoByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+V4jbHjZAlZ22AwoPe0iXbjAGrEWbYQ9tUDHS2eIikSx5aiIE+t+HI+Uf",
	"suU4STvspU9ReEfex/vuu6NvITe1NRo1eZjdgs9LrGX4fOWccfxhnbHoSGFYzk2B/LdAnztlSRkNs+gs",
	"gi2BhXG1JJiB0vTsKSRArcX4Ly7RQZdAjd7L5cGDVub1Vk9O6SV0XQIOPzXKYQGz99AHXLlfdAn8idfn",
	"pjBzwnoMvCbUtB+Wt4jemoht2x6EBAqjR5D/VsmlMAvB1lRMRY1Se6ENhZVEnPQrwb6TpdEcVR9VcfNx",
	"PNgpkVOXDaFYGCe8cSSusOXwlcllJTzmRhfStULpAm/SsWuQogoPpCLajqU/enHWt1Muq+r1Ambvb+F7",
	"hwuYwXeTTZFN+gqbbPPUJbtEEZvODoCbn41dp/Hoxrb85dGNbtm9TAy5Puiiu+jYR+mF2T/17at35+L0",
	"zZxTzjufSGthnVNYLbELJPAZnY/7pulJOmW4xqKWVsEMnqXTdAoJWElluPyEd4evJY7U6u9IQlZVCOsT",
	"EfivMQApsRaXrWi80kvxqUHXCiudrJHQeS4CzrHkc+YFl6zSxXmIxdFXfoG6Yci/S6QSHQcIYUUpvbhE",
	"1H21Z9Nsr96zk2yn4hUfFVBBAlrWnKhQ3knfd/iuR5sHF8tOUUi3RBJ9BbVREihdXiq9TEUWSMkSkfUC",
	"z0LSsktDZZaK81L5TZbEtXFXXlwrKkV2he21cUW2MR+6BgUIg4vsVdsu7DfSEQNhLiN5UXbJqhGxkUGu",
	"qaVSkqgl5WWkPFTAIUg9+DsxXbAEvDXaR9k9nU532qS0tlJ5KJnJP97on0VeSueRfmlo8WIzMvhLEdbh",
	"mLt0vyX6FRzpnGwhiG2Yodd/hHaLC9lUdATYEMpdCOJgGwnXaLyxmBMWAnufBHxT19K1MGMxbqWdkVnj",
	"R/R5WhRCBqd9xZ0WQXAQWw96emmK9qvdbNBTh/2NXIPdl7H95MX9kQxhjLH6PAYfml7KQryNiWGfn8Z8",
	"5prQaVmJd+g+oxOvRqiSawqCITbUyW1s8V08s0IamX5nYb3fzL2U1hNnyGR05Hu+bIP5zgY6P1sNCsEq",
	"EWREj6AXLzf/rXaymkVDAh8m5ef/H7n3k+yjATxWwcU2uYzz8Hw9yv9qdj6C/f+Q8+k3zke69oZwy8Nz",
	"5I1oC3kv1UfHL1B9Ew74ahWw/xbiF0R4AWm8Xg+hEOySR80mWP/Cf8DZv/bPkh+2lvnHEklVpWn6Ywgr",
	"jwVeFceDQg9/XH2A6QfYe3B+gJP16uDJOYz/iBfnN50d11mzLaG434cBHYXRuApmUBJZP5tM8EbWtsI0",
	"N/VEWjWB7qL7NwAA//+QNqB1ixAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
