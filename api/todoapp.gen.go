// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewTodoItem defines model for NewTodoItem.
type NewTodoItem struct {

	// Todo content, description
	Content *string `json:"content,omitempty"`

	// Flag of done. 0 means not done, 1 means done.
	Done *int32 `json:"done,omitempty"`

	// Attribute for sort key of local secondary index.
	LIdxDone *string `json:"l_idx_done,omitempty"`

	// Todo title
	Title string `json:"title"`
}

// TodoItem defines model for TodoItem.
type TodoItem struct {
	// Embedded struct due to allOf(#/components/schemas/NewTodoItem)
	NewTodoItem `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Todo ID
	Id string `json:"id"`

	// User ID
	Userid string `json:"userid"`
}

// FindTodosParams defines parameters for FindTodos.
type FindTodosParams struct {

	// Whether the todo has been done. `0` means not done, `1` means done.
	Done *int32 `json:"done,omitempty"`

	// Target property for searching. `title`, `content`, or `both`. This parameter works with `keyword` parameter.
	Target *string `json:"target,omitempty"`

	// Part or all of the title, content or both of them that match some todos.
	Keyword *string `json:"keyword,omitempty"`
}

// AddTodoJSONBody defines parameters for AddTodo.
type AddTodoJSONBody NewTodoItem

// AddTodoJSONRequestBody defines body for AddTodo for application/json ContentType.
type AddTodoJSONRequestBody AddTodoJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get some todos
	// (GET /todos)
	FindTodos(w http.ResponseWriter, r *http.Request, params FindTodosParams)
	// add a todo
	// (POST /todos)
	AddTodo(w http.ResponseWriter, r *http.Request)
	// delete a todo
	// (DELETE /todos/{id})
	DeleteTodoByID(w http.ResponseWriter, r *http.Request, id string)
	// get a todo
	// (GET /todos/{id})
	FindTodoByID(w http.ResponseWriter, r *http.Request, id string)
	// update a todo
	// (PATCH /todos/{id})
	UpdateTodoByID(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindTodos operation middleware
func (siw *ServerInterfaceWrapper) FindTodos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTodosParams

	// ------------- Optional query parameter "done" -------------
	if paramValue := r.URL.Query().Get("done"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "done", r.URL.Query(), &params.Done)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter done: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "target" -------------
	if paramValue := r.URL.Query().Get("target"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "target", r.URL.Query(), &params.Target)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter target: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "keyword" -------------
	if paramValue := r.URL.Query().Get("keyword"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "keyword", r.URL.Query(), &params.Keyword)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter keyword: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindTodos(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddTodo operation middleware
func (siw *ServerInterfaceWrapper) AddTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTodo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTodoByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodoByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindTodoByID operation middleware
func (siw *ServerInterfaceWrapper) FindTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindTodoByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateTodoByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodoByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos", wrapper.FindTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todos", wrapper.AddTodo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todos/{id}", wrapper.DeleteTodoByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos/{id}", wrapper.FindTodoByID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/todos/{id}", wrapper.UpdateTodoByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+V4jbHjZAlZ22AwoNe0iXbDAGrEWbYQ9NUDHi2eIikSx5qiME+t8HkvIP",
	"2XKcpB320qcovCPv43333dF3UOjaaIWKHGR34IoSax4+z63V1n8Yqw1akhiWCy3Q/xXoCisNSa0gi84s",
	"2BKYa1tzggykohfPIQFqDcZ/cYEWugRqdI4vDh60Mq+3OrJSLaDrErD4qZEWBWQfoA+4cr/qEvgTlxda",
	"6BlhPQZeESraD+u3sN6asG3bHoQEhFYjyH+r+ILpOfPWlE1ZjVw5pjSFlYSd9CvB/rAsVR+luP04Hu6U",
	"yMrrhpDNtWVOW2I32HoAlS54xRwWWgluWyaVwNt07CIkqcIDyYi2YwREL5/37aTzqnozh+zDHXxvcQ4Z",
	"fDfZlNmkr7HJNlNdskuVFAeAzc4gAcVrjyp8712rcWjHtv/l0A62+4WxI3YuKQWsD73qrjpvl2qu9yO8",
	"O39/wU7fzjwNpIV+xo2BdZ5hteRdIIHPaF3cN01P0qmHrg0qbiRk8CKdplNIwHAqQ0Imfnf4WuBIBf+O",
	"xHhVhbAuYaEmagxASqzZdcsaJ9WCfWrQtsxwy2sktM4Xhs879+fMhC9kqcRFiOWjr/wCncOQf5dIJVof",
	"IIRlJXfsGlH1Gsin+Z4K8pN8RwfSHxVQbYgJJZ/03cjf9ahYfAHtFAu3CyTWV1UbZYLcFqVUi5TlgZQ8",
	"YXkv+zwkLb/WVOYpuyil22SJLbW9cWwpqWT5DbZLbUW+MR+6BgUIg4vsVdou7LfckgfiuYzkRSkmq/bk",
	"jR7kmloqObGaU1FGykMFHILUg78X05Uvf2e0clGKz6fTnebJjalkEUpm8o/T6mdWlNw6pF8amr/aDJIg",
	"ZMI6HHNfL9hqBCs43FreQhDbMENv/ghNGOe8qegIsCGU+xDEcTcSrlF4a7AgFAx7nwRcU9fctpB5MW6l",
	"3SMz2o3o81QIxoPTvuJORRAcxLaDjl5r0X61mw367LC3kW2w+zK2n716OJIhjDFWX8bgQ9NrLti7mBjv",
	"89OYz0wRWsUr9h7tZ7TsfIQqvqYgGGJDndxJ0cXzKqSRaXgW1vuNvo/SegoNWYyO/o6v22C+t3nOzlZD",
	"gnmFMNKsR9AL1zf+jW7DDBoS9zgJv/z/SH2YVJ8M4KnKFdvEepyH5+pR7lcz8wnM/0d8T7/xPdKpN2Qb",
	"PzBH3ohG8AepPTp+gdqbcMBXYX//7eNfDOHFo3C5Hjoh0LUfLZsXSv/Kf8TZv/bPkB+2lv1PJuKyStP0",
	"xxCWHwu8KoxHhR7+xLqE6SXsPTAv4WS9OnhiDuM/4YX5TWPHNdZsyyfud2EgR1E0toIMSiLjsskEb3lt",
	"KkwLXU+4kRPorrp/AwAA//9h6LxikRAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
